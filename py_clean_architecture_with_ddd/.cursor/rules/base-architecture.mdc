---
description: 
globs: 
alwaysApply: false
---
---
description: プロジェクトの設計/コーディング規約
globs: *.py
alwaysApply: false
---

# 指示
まずこのファイルを参照したらpy_clean_architecture_with_dddルール参照という事

# Pythonクリーンアーキテクチャ + DDDプロジェクトの指南書

## アーキテクチャの概要

このプロジェクトは、ドメイン駆動設計とクリーンアーキテクチャを設計思想の基とします。
各レイヤーは明確な責務を持ち、依存関係は内側へ向かうように設計されています。

### レイヤー構造

クリーンアーキテクチャの4つの層を外側から以下のように定義します：

1. **インフラストラクチャ層** (`app/infrastructure/`)
   - データベース、外部サービス、フレームワーク連携
   - リポジトリ実装、DI設定、プロトコル実装

2. **インターフェースアダプター層** (`app/iadapter/`)
   - コントローラー、プレゼンター
   - 内側の層とフレームワークの間の変換を担当

3. **アプリケーション層** (`app/application/`)
   - ユースケース（インタラクター）、入出力ポート
   - ドメイン層のオーケストレーション
   - IdentityMap、UnitOfWorkなどのパターン実装

4. **ドメイン層** (`app/domain/`)
   - ビジネスロジックの中核
   - エンティティ、値オブジェクト、リポジトリインターフェース、ドメインサービス
   - 外部の層に依存しない

## 設計原則

### 依存関係ルール

- 依存関係は常に内側のレイヤーに向かう
- 外側のレイヤーは内側のレイヤーを知っているが、内側は外側を知らない
- 依存性逆転の原則を用いて、内側のレイヤーがインターフェースを定義し、外側のレイヤーが実装する

### CQRSパターン

- コマンド（状態変更）とクエリ（状態参照）の責務を分離
- 各ユースケースは明確な入力と出力を持つ
- インタラクターはユースケースの実装を提供

### 非同期処理

- コントローラーとインタラクターは非同期メソッド(`async/await`)で実装
- gRPCサービスは`async_grpc_method`デコレータを使用して非同期APIを同期インターフェースに橋渡し

## 主要なパターン

### リポジトリパターン

- データアクセスを抽象化し、コレクションのようなインターフェースを提供
- `ReadRepository`と`WriteRepository`に責務を分離（CQRSに従う）

### IdentityMapパターン

- エンティティの一意性を保証し、重複の読み込みを防止
- IDやユニークキーによるエンティティの検索を提供

### UnitOfWorkパターン

- トランザクション境界を明示的に定義
- 複数のリポジトリ操作を一つのトランザクションにまとめる

### Presenter/Controller

- コントローラーは入力を受け取り、適切なインタラクターに委譲
- プレゼンターはアプリケーション層の出力を表示層形式に変換

## コード規約

### 非同期API

- APIエンドポイントは`.extend.async_grpc_method`デコレータを使用
- ビジネスロジックは純粋な非同期コードで実装
- 新しいエンドポイントの追加時には同じパターンを踏襲

```python
@async_grpc_method("Error processing NewFunction request")
async def NewFunction(self, request: NewRequest, _context: grpc.ServicerContext) -> NewResponse:
    """新しいエンドポイント(非同期)"""
    return await self.controller.new_function(request)
```

### 型ヒント

- すべての関数引数と戻り値に型アノテーションを付ける
- 複雑な型は`TypeVar`や`Protocol`を使用して表現

### エラー処理

- 適切な例外を定義し、エラーメッセージを明確にする
- ドメイン例外は`domain/exceptions.py`に定義する
- プレゼンテーション層での例外はログに記録し、適切なエラーコードでクライアントに返す

## 新機能追加時のフロー

1. ドメイン層での必要なエンティティ・値オブジェクトの定義
2. アプリケーション層でのユースケース定義（入出力ポート、インタラクター）
3. インターフェースアダプター層でのコントローラー・プレゼンター実装
4. インフラストラクチャ層での実装（リポジトリ、gRPCサービスなど）
5. 必要に応じてDIコンテナに登録
